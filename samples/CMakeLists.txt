cmake_minimum_required(VERSION 3.16)

project(msample, VERSION 0.0.9 LANGUAGES CXX)

add_custom_target(
  msample_lib
  COMMAND m ${CMAKE_CURRENT_SOURCE_DIR}/sample_lib.m
  COMMAND m ${CMAKE_CURRENT_SOURCE_DIR}/sample.m
  # MacOS COMMAND ld ${CMAKE_CURRENT_SOURCE_DIR}/sample.o ${CMAKE_CURRENT_SOURCE_DIR}/../build/src/libmlr.a /usr/lib/libc.dylib -o ${CMAKE_CURRENT_SOURCE_DIR}/sample
  COMMAND ld ${CMAKE_CURRENT_SOURCE_DIR}/sample.o ${CMAKE_CURRENT_SOURCE_DIR}/../build/src/libmlr.a /usr/lib/x86_64-linux-gnu/libc.so -o ${CMAKE_CURRENT_SOURCE_DIR}/sample
)

# set list of object files generated by m compiler to be built in c
set(OBJS
  ${CMAKE_CURRENT_SOURCE_DIR}/sample_lib.o
)

# specify they are object files
set_source_files_properties(
    ${OBJS} PROPERTIES
    EXTERNAL_OBJECT TRUE  # Identifies this as an object file
    GENERATED TRUE  # Avoids need for file to exist at configure-time
)

# include source files and object files
add_executable(msample
  ${OBJS}
  sample_main.cc
)


link_directories(
  ${CMAKE_CURRENT_SOURCE_DIR}
)

TARGET_LINK_LIBRARIES(msample PRIVATE mlr)

add_custom_command(
  TARGET msample
  POST_BUILD
  COMMAND msample
)


